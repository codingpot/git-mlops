name: Hugging Face Deployment

env:
  HF_AT: ${{ secrets.HF_AT }}
  
on:
  pull_request:
    types: [opened]
    
  issue_comment:
    types: [created]

jobs:
  hf-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: octokit/request-action@v2.0.0
        name: GitHub API Request
        id: request
        with:
          route: ${{ github.event.issue.pull_request.url }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR informations
        id: pr_data  
        run: |
          echo "::set-output name=number::${{ fromJson(steps.request.outputs.data).number }}"
          echo "::set-output name=branch::${{ fromJson(steps.request.outputs.data).head.ref }}"
          echo "::set-output name=repo_name::${{ github.event.repository.name }}"
          echo "::set-output name=repo_owner::${{ github.event.repository.owner.login }}"
          echo "::set-output name=comment_owner::${{ github.event.sender.login }}"
          echo "::set-output name=comment::${{ github.event.comment.body }}"
          
      - name: Extract comment
        if: ${{ steps.pr_data.outputs.repo_owner == steps.pr_data.outputs.comment_owner }}
        run: |
          echo "Eligible!!"
          
      - uses: khan/pull-request-comment-trigger@v1.1.0
        name: Listen to comment on PR (training)
        id: check
        if: ${{ steps.pr_data.outputs.repo_owner == steps.pr_data.outputs.comment_owner }}
        with:
          trigger: '#deploy-hf'
          reaction: rocket
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - uses: actions/checkout@v3
        name: Clone branch of PR
        if: steps.check.outputs.triggered == 'true'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ steps.pr_data.outputs.branch }}
          
      - name: Install Python packages
        if: steps.check.outputs.triggered == 'true'
        run: |
          pip install requirements.txt

      - name: Create or get HF's model repo
        id: hf_model
        if: steps.check.outputs.triggered == 'true'
        run: |
          python clouds/huggingface.py \
            repo create \
              ${{ env.HF_AT }} ${{ env.HF_USER_ID }} ${{ steps.pr_data.outputs.repo_name }} --repo-type model \
                > outputs.json
          content=$(cat outputs.json)
          echo "::set-output name=status::${{ fromJson($content).status }}"
          echo "::set-output name=repo_id::${{ fromJson($content).repo_id }}"

      - name: Upload model to HF's model repo
        id: hf_model_upload
        if: steps.hf_model.outputs.status == 'success'
        run: |
          python clouds/huggingface.py \
            repo upload \
              ${{ env.HF_AT }} ${{ steps.hf_model.outputs.repo_id }} \
                > outputs.json
          content=$(cat outputs.json)
          echo "::set-output name=status::${{ fromJson($content).status }}"
      
      - name: Create or get HF's space repo
        id: hf_space
        if: steps.hf_model_upload.outputs.status == 'success'
        run: |
          python clouds/huggingface.py \
            repo create \
              ${{ env.HF_AT }} ${{ env.HF_USER_ID }} ${{ steps.pr_data.outputs.repo_name }} --repo-type space \
                > outputs.json
          content=$(cat outputs.json)
          echo "::set-output name=status::${{ fromJson($content).status }}"
          echo "::set-output name=repo_id::${{ fromJson($content).repo_id }}"          
      
      - name: Upload app to HF's space repo
        if: steps.hf_space.outputs.status == 'success'
        env:
          MODEL_REPO_ID: ${{ steps.hf_model.outputs.repo_id }}
        run: |
          envsubst '$MODEL_REPO_ID' < hf-space/app_template.py > hf-space/app.py
          rm hf-space/app_template.py
          python clouds/huggingface.py \
            repo upload \ 
              ${{ env.HF_AT }} ${{ steps.hf_space.outputs.repo_id }} --repo-type space --path hf-space